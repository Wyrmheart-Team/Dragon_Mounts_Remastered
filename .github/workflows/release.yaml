name: Automatic Build Pipeline

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

permissions:
  contents: write

jobs:
  common-setup:
    name: Common Setup
    runs-on: ubuntu-latest
    outputs:
      java_version:      ${{ steps.read_props.outputs.java_version }}
      minecraft_version: ${{ steps.read_props.outputs.minecraft_version }}
      neo_version:       ${{ steps.read_props.outputs.neo_version }}
      geckolib_version:  ${{ steps.read_props.outputs.geckolib_version }}
      mod_name:          ${{ steps.read_props.outputs.mod_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Read gradle.properties and set outputs
        id: read_props
        run: |
          while IFS='=' read -r key value; do
            key=$(echo "$key"   | xargs)
            value=$(echo "$value" | xargs)
            [[ -z "$key" || "$key" == \#* ]] && continue
            echo "$key=$value" >> $GITHUB_ENV
            echo "$key=$value" >> $GITHUB_OUTPUT
          done < gradle.properties
  
  java-build:
    name: Java Build
    needs: common-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Install Crowdin CLI
        run: npm i -g @crowdin/cli
      
      - name: Upload Crowdin sources
        run: crowdin upload sources -b ${{ github.ref_name }}
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
      
      - name: Download Crowdin translations
        run: crowdin download translations -b ${{ github.ref_name }}
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
      
      - name: Post-process Crowdin files
        run: bash .github/scripts/crowdin-post-process.sh
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ needs.common-setup.outputs.java_version }}
          distribution: temurin
          cache: gradle
      
      - name: Update mod_version
        run: |
          sed -i \
            "s/mod_version=.*/mod_version=${{ inputs.version }}/g" \
            gradle.properties
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew build
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: dragon-mounts-jar
          path: build/libs/*.jar
          retention-days: 1
  
  replace-placeholders:
    name: Replace Placeholders
    needs: common-setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [curseforge_upload.json, modrinth_upload.json]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download generated CHANGELOG.md
        uses: actions/download-artifact@v4
        with:
          name: changelog-md
          path: .
      
      - name: Build ${{ matrix.file }}
        run: |
          jq \
            --rawfile log CHANGELOG.md \
            --arg version "${{ inputs.version }}" \
            --arg mod_name "${{ needs.common-setup.outputs.mod_name }}" \
            --arg mc_ver "${{ needs.common-setup.outputs.minecraft_version }}" \
            '.version = $version
             | .changelog = $log
             | .modName = $mod_name
             | .minecraftVersion = $mc_ver' \
            ./.github/templates/${{ matrix.file }} \
            > ${{ matrix.file }}
      
      - name: Upload Processed File
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file }}
          path: ${{ matrix.file }}
  
  upload:
    name: Upload to Platforms
    needs: [java-build, replace-placeholders]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [curseforge, modrinth]
    steps:
      - name: Download Processed Metadata
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}_upload.json
          path: .
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: dragon-mounts-jar
          path: build/libs/
      
      - name: Upload to CurseForge
        if: matrix.platform == 'curseforge'
        id: curseforge_upload
        env:
          CF_API_KEY:    ${{ secrets.CF_API_KEY }}
          CF_PROJECT_ID: ${{ secrets.CF_PROJECT_ID }}
        run: |
          FILE=$(find build/libs -name "*.jar" | head -n 1)
          RESPONSE=$(curl --fail-with-body \
            "https://minecraft.curseforge.com/api/projects/${{ env.CF_PROJECT_ID }}/upload-file" \
            -H "X-Api-Token: ${{ env.CF_API_KEY }}" \
            -F "metadata=$(cat curseforge_upload.json)" \
            -F "file=@$FILE")
          CF_FILE_ID=$(echo "$RESPONSE" | jq -r '.id')
          CF_DIRECT_URL="https://www.curseforge.com/minecraft/mc-mods/dmr/files/$CF_FILE_ID"
          echo "CF_FILE_ID=$CF_FILE_ID" >> $GITHUB_ENV
          echo "CF_DIRECT_URL=$CF_DIRECT_URL" >> $GITHUB_ENV
      
      - name: Upload to Modrinth
        if: matrix.platform == 'modrinth'
        id: modrinth_upload
        env:
          MODRINTH_API_KEY:    ${{ secrets.MODRINTH_API_KEY }}
          MODRINTH_PROJECT_ID: dmr
        run: |
          FILE=$(find build/libs -name "*.jar" | head -n 1)
          RESPONSE=$(curl --fail-with-body -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: ${{ env.MODRINTH_API_KEY }}" \
            -F "data=@modrinth_upload.json" \
            -F "file=@$FILE")
          MR_VERSION_ID=$(echo "$RESPONSE" | jq -r '.id')
          MR_FILE_ID=$(echo "$RESPONSE" | jq -r '.files[0].id')
          MR_VERSION_PAGE_URL="https://modrinth.com/mod/${{ env.MODRINTH_PROJECT_ID }}/version/${{ inputs.version }}"
          echo "MR_VERSION_ID=$MR_VERSION_ID" >> $GITHUB_ENV
          echo "MR_FILE_ID=$MR_FILE_ID" >> $GITHUB_ENV
          echo "MR_VERSION_PAGE_URL=$MR_VERSION_PAGE_URL" >> $GITHUB_ENV
  
  after-release:
    name: Announce Release
    needs: [upload, common-setup]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download CHANGELOG.md
        uses: actions/download-artifact@v4
        with:
          name: changelog-md
          path: .
      
      - name: Notify Discord
        shell: pwsh {0}
        run: |
          pwsh ./.github/scripts/announce_release.ps1 `
            -WebhookUrl ${{ secrets.DISCORD_ANNOUNCEMENT_WEBHOOK_URL }} `
            -ModName "${{ needs.common-setup.outputs.mod_name }}" `
            -NewReleaseVersion "${{ inputs.version }}" `
            -ChangelogFile "./CHANGELOG.md" `
            -GitAuthor "$GITHUB_TRIGGERING_ACTOR" `
            -AuthorAvatar "https://avatars.githubusercontent.com/$GITHUB_TRIGGERING_ACTOR"
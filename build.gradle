import org.slf4j.event.Level

plugins {
    id 'java-library'
    id 'idea'
    id "io.freefair.lombok" version "8.10"
    id "net.neoforged.moddev"
    id 'com.diffplug.spotless' version '7.0.4'
}

version = "$minecraft_version-$mod_version"
group = mod_group_id
base {
    archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


spotless {
    java {
        target 'src/*/java/**/*.java'
        targetExclude 'src/generated/**/*.java', 'src/test/**/*Test.java'

        importOrder 'java', 'javax', 'org', 'com', 'net.minecraft', 'net.neoforged', ''
        removeUnusedImports()
        cleanthat()
        palantirJavaFormat()
        trimTrailingWhitespace()
        endWithNewline()
        formatAnnotations()
    }
}

sourceSets {
    test {
        java {
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs 'src/test/resources'
        }
    }
    generated {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "net.neoforged:testframework:${project.neo_version}"

    testImplementation sourceSets.main.output

    implementation "software.bernie.geckolib:geckolib-neoforge-$minecraft_version:$geckolib_version"

    compileOnly "mezz.jei:jei-$minecraft_version-common-api:$jei_version"
    compileOnly "mezz.jei:jei-$minecraft_version-neoforge-api:$jei_version"

    runtimeOnly "mezz.jei:jei-$minecraft_version-neoforge:$jei_version"
}


neoForge {
    version = project.neo_version
    addModdingDependenciesTo sourceSets.test

    parchment {
        minecraftVersion = project.parchment_mc_version
        mappingsVersion = project.parchment_version
    }

    validateAccessTransformers = true

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
            devLogin = true
        }
        server {
            server()
            programArgument '--nogui'
        }
        // This run config launches GameTestServer and runs all registered gametests, then exits.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            logLevel = Level.INFO

            sourceSet = sourceSets.test
            // Include the test resources in the classpath for this specific run config.
            mods  {
                "${mod_id}" {
                    sourceSet(sourceSets.test)
                }
            }
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }

    unitTest {
        enable()
        testedMod = mods."${mod_id}"
    }
    additionalMinecraftArtifacts.put('vanillaDeobfuscated', project.file('build/vanilla.jar'))
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number,
            geckolib_version_range : geckolib_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.named('spotlessCheck') {
    enabled = false
}

tasks.named('build') {
    dependsOn tasks.named('spotlessApply')
}